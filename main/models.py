from django.db import modelsfrom django.db.models import Avgclass Genre(models.Model):    genre_id = models.AutoField(primary_key=True)    name = models.CharField(max_length=100)    def __str__(self):        return self.nameclass Collection(models.Model):    collection_id = models.AutoField(primary_key=True)    name = models.CharField(max_length=200)    poster_path = models.CharField(max_length=200, blank=True, null=True)    backdrop_path = models.CharField(max_length=200, blank=True, null=True)    def __str__(self):        return self.nameclass Movie(models.Model):    movie_id = models.AutoField(primary_key=True)    title = models.CharField(max_length=100)    overview = models.TextField()    release_date = models.DateField(null=True, blank=True)    genres = models.ManyToManyField(Genre)    runtime = models.PositiveIntegerField()    revenue = models.DecimalField(max_digits=15, decimal_places=2)    budget = models.DecimalField(max_digits=15, decimal_places=2)    poster_url = models.URLField(max_length=200, blank=True, null=True)    tagline = models.CharField(max_length=255, blank=True, null=True)    belongs_to_collection = models.ForeignKey(Collection, null=True, blank=True, on_delete=models.SET_NULL)    adult = models.BooleanField(default=False)    imdb_id = models.CharField(max_length=50, blank=True, null=True)    original_title = models.CharField(max_length=100, blank=True, null=True)    backdrop_url = models.URLField(max_length=200, blank=True, null=True)    def __str__(self):        return self.titleclass Ratings(models.Model):    ratings_id = models.AutoField(primary_key=True)    movie = models.ForeignKey(Movie, on_delete=models.CASCADE)    tmdb_popularity = models.FloatField(blank=True, null=True)    tmdb_vote_average = models.FloatField(blank=True, null=True)    tmdb_vote_count = models.IntegerField(blank=True, null=True)    imdb_rating = models.FloatField(blank=True, null=True)    imdb_vote_count = models.IntegerField(blank=True, null=True)    @staticmethod    def calculate_mean_score():        tmdb_avg = Ratings.objects.aggregate(Avg('tmdb_vote_average'))['tmdb_vote_average__avg']        imdb_avg = Ratings.objects.aggregate(Avg('imdb_rating'))['imdb_rating__avg']        return (tmdb_avg + imdb_avg) / 2    def calculate_weighted_score(self, m=50):        tmdb_vote_average = self.tmdb_vote_average or 0        imdb_rating = self.imdb_rating or 0        tmdb_vote_count = self.tmdb_vote_count or 0        imdb_vote_count = self.imdb_vote_count or 0        # Calculate average score S        total_votes = tmdb_vote_count + imdb_vote_count        if total_votes == 0:            return 0        avg_score = (tmdb_vote_average * tmdb_vote_count + imdb_rating * imdb_vote_count) / total_votes        # Mean score across the database        mean_score = Ratings.calculate_mean_score()        # Weighted score calculation        weighted_score = (total_votes / (total_votes + m)) * avg_score + (m / (total_votes + m)) * mean_score        return weighted_score